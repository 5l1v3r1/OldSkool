/*
   I never knew how this worked, so I figured it out:

   Look at this breakdown of the square root:

   sqrt = sqrt(mantisa) + (exponent / 2)


   We limit the number of bits used in the mantisa and perform the sqrt
   as a precalc and store in a table.  Limiting the mantisa to just
   7 bits means 128 values are required to store in the table.

   Looking at the exponent you can see it is divided by 2. However, if the
   exponent is not a multiple of 2 we lose our exponent so we store another
   128 values with an exponent of 1.  This results in a 1k LUT.

   To generate the sqrt we simply strip off the mantisa, use the MSB 7
   bits as an index into the table.  We divide the exponent by two but
   before we do that we determine if the exponent is odd (check LSB) and
   that determines which 128 values we look at.

   Thats all.

   My update is a 1/sqrt function.  I broke it down to this:


   1/sqrt = 1/sqrt(mantisa) + -((exponent / 2) + 1))

   Special case: When the mantisa is zero, the exponent is

   -(exponent / 2)


   The rest performs exactly like the sqrt.


   Original fast sqrt from Graphic Gems..


   - frenzy ^ LiQUiD
*/

#ifndef __SQRT_H__
#define __SQRT_H__

#include <math.h>

unsigned int sqrt_tab[] = {
    0x00000000,0x00007fc0,0x0000ff02,0x00017dc7,0x0001fc10,0x000279df,0x0002f734,0x00037413,
    0x0003f07b,0x00046c6f,0x0004e7ee,0x000562fc,0x0005dd98,0x000657c5,0x0006d182,0x00074ad3,
    0x0007c3b6,0x00083c2f,0x0008b43d,0x00092be3,0x0009a320,0x000a19f6,0x000a9067,0x000b0672,
    0x000b7c1a,0x000bf15e,0x000c6641,0x000cdac3,0x000d4ee4,0x000dc2a7,0x000e360b,0x000ea912,
    0x000f1bbd,0x000f8e0c,0x00100000,0x0010719a,0x0010e2dc,0x001153c4,0x0011c456,0x00123491,
    0x0012a476,0x00131406,0x00138341,0x0013f229,0x001460be,0x0014cf01,0x00153cf2,0x0015aa92,
    0x001617e3,0x001684e4,0x0016f196,0x00175dfa,0x0017ca11,0x001835dc,0x0018a15a,0x00190c8c,
    0x00197774,0x0019e211,0x001a4c65,0x001ab66f,0x001b2032,0x001b89ac,0x001bf2df,0x001c5bcb,
    0x001cc471,0x001d2cd1,0x001d94ec,0x001dfcc2,0x001e6455,0x001ecba4,0x001f32af,0x001f9979,
    0x00200000,0x00206646,0x0020cc4a,0x0021320e,0x00219792,0x0021fcd7,0x002261dc,0x0022c6a3,
    0x00232b2b,0x00238f75,0x0023f383,0x00245753,0x0024bae7,0x00251e3e,0x0025815a,0x0025e43b,
    0x002646e1,0x0026a94d,0x00270b7f,0x00276d77,0x0027cf36,0x002830bc,0x0028920a,0x0028f31f,
    0x002953fd,0x0029b4a4,0x002a1514,0x002a754d,0x002ad550,0x002b351d,0x002b94b5,0x002bf417,
    0x002c5345,0x002cb23e,0x002d1104,0x002d6f95,0x002dcdf3,0x002e2c1e,0x002e8a16,0x002ee7db,
    0x002f456f,0x002fa2d0,0x00300000,0x00305cff,0x0030b9cc,0x0031166a,0x003172d6,0x0031cf13,
    0x00322b20,0x003286fe,0x0032e2ac,0x00333e2c,0x0033997c,0x0033f49f,0x00344f93,0x0034aa5a,
    0x003504f3,0x0035b99e,0x00366d96,0x003720dd,0x0037d375,0x00388560,0x003936a1,0x0039e738,
    0x003a9728,0x003b4673,0x003bf51b,0x003ca321,0x003d5087,0x003dfd4e,0x003ea979,0x003f5509,
    0x00400000,0x0040aa5f,0x00415428,0x0041fd5c,0x0042a5fe,0x00434e0d,0x0043f58d,0x00449c7e,
    0x004542e1,0x0045e8b9,0x00468e06,0x004732ca,0x0047d706,0x00487abc,0x00491dec,0x0049c098,
    0x004a62c2,0x004b046a,0x004ba592,0x004c463a,0x004ce665,0x004d8613,0x004e2545,0x004ec3fc,
    0x004f623a,0x00500000,0x00509d4e,0x00513a26,0x0051d689,0x00527278,0x00530df3,0x0053a8fd,
    0x00544395,0x0054ddbc,0x00557775,0x005610bf,0x0056a99b,0x0057420b,0x0057da10,0x005871a9,
    0x005908d9,0x00599fa0,0x005a35fe,0x005acbf5,0x005b6186,0x005bf6b1,0x005c8b77,0x005d1fd9,
    0x005db3d7,0x005e4773,0x005edaae,0x005f6d87,0x00600000,0x00609219,0x006123d4,0x0061b531,
    0x00624630,0x0062d6d3,0x00636719,0x0063f704,0x00648695,0x006515cc,0x0065a4a9,0x0066332e,
    0x0066c15a,0x00674f2f,0x0067dcae,0x006869d6,0x0068f6a9,0x00698327,0x006a0f50,0x006a9b26,
    0x006b26a9,0x006bb1d9,0x006c3cb7,0x006cc744,0x006d517f,0x006ddb6b,0x006e6507,0x006eee53,
    0x006f7751,0x00700000,0x00708862,0x00711076,0x0071983e,0x00721fba,0x0072a6ea,0x00732dcf,
    0x0073b46a,0x00743aba,0x0074c0c0,0x0075467e,0x0075cbf2,0x0076511e,0x0076d603,0x00775aa0,
    0x0077def6,0x00786305,0x0078e6ce,0x00796a52,0x0079ed91,0x007a708b,0x007af340,0x007b75b1,
    0x007bf7df,0x007c79ca,0x007cfb72,0x007d7cd8,0x007dfdfc,0x007e7ede,0x007eff7f,0x007f7fe0,
};


unsigned int oo_sqrt_tab[] = {
    0x00000000,0x007f017e,0x007e05ec,0x007d0d3e,0x007c1764,0x007b2452,0x007a33f9,0x0079464e,
    0x00785b42,0x007772cb,0x00768cdc,0x0075a969,0x0074c867,0x0073e9cb,0x00730d8a,0x00723399,
    0x00715bef,0x00708681,0x006fb345,0x006ee232,0x006e133e,0x006d4660,0x006c7b90,0x006bb2c5,
    0x006aebf5,0x006a271a,0x0069642a,0x0068a31d,0x0067e3ed,0x00672691,0x00666b02,0x0065b139,
    0x0064f92e,0x006442db,0x00638e39,0x0062db41,0x006229ed,0x00617a36,0x0060cc16,0x00601f87,
    0x005f7483,0x005ecb04,0x005e2305,0x005d7c7f,0x005cd76e,0x005c33cc,0x005b9193,0x005af0bf,
    0x005a514a,0x0059b330,0x0059166b,0x00587af7,0x0057e0cf,0x005747ee,0x0056b051,0x005619f2,
    0x005584cd,0x0054f0df,0x00545e22,0x0053cc93,0x00533c2e,0x0052acee,0x00521ed0,0x005191d1,
    0x005105ec,0x00507b1d,0x004ff162,0x004f68b6,0x004ee116,0x004e5a7f,0x004dd4ed,0x004d505e,
    0x004ccccd,0x004c4a38,0x004bc89b,0x004b47f4,0x004ac83f,0x004a497a,0x0049cba2,0x00494eb3,
    0x0048d2ab,0x00485787,0x0047dd45,0x004763e2,0x0046eb5a,0x004673ac,0x0045fcd6,0x004586d3,
    0x004511a3,0x00449d42,0x004429af,0x0043b6e6,0x004344e6,0x0042d3ad,0x00426337,0x0041f383,
    0x0041848f,0x00411659,0x0040a8de,0x00403c1c,0x003fd012,0x003f64bd,0x003efa1c,0x003e902c,
    0x003e26eb,0x003dbe58,0x003d5671,0x003cef34,0x003c889f,0x003c22b1,0x003bbd67,0x003b58c0,
    0x003af4ba,0x003a9154,0x003a2e8c,0x0039cc60,0x00396ace,0x003909d6,0x0038a975,0x003849aa,
    0x0037ea74,0x00378bd0,0x00372dbf,0x0036d03d,0x0036734a,0x003616e4,0x0035bb09,0x00355fba,
    0x003504f3,0x003450fc,0x00339f19,0x0032ef41,0x0032416a,0x00319589,0x0030eb96,0x00304387,
    0x002f9d53,0x002ef8f2,0x002e565c,0x002db587,0x002d166c,0x002c7904,0x002bdd46,0x002b432a,
    0x002aaaab,0x002a13c0,0x00297e62,0x0028ea8c,0x00285835,0x0027c759,0x002737f0,0x0026a9f4,
    0x00261d5f,0x0025922c,0x00250855,0x00247fd3,0x0023f8a2,0x002372bd,0x0022ee1d,0x00226abe,
    0x0021e89b,0x002167af,0x0020e7f5,0x00206968,0x001fec04,0x001f6fc4,0x001ef4a4,0x001e7aa0,
    0x001e01b3,0x001d89d9,0x001d130e,0x001c9d4e,0x001c2896,0x001bb4e1,0x001b422c,0x001ad073,
    0x001a5fb2,0x0019efe6,0x0019810c,0x00191320,0x0018a61f,0x00183a05,0x0017ced0,0x0017647c,
    0x0016fb06,0x0016926c,0x00162aa9,0x0015c3bc,0x00155da2,0x0014f857,0x001493d9,0x00143026,
    0x0013cd3a,0x00136b13,0x001309af,0x0012a90b,0x00124925,0x0011e9f9,0x00118b87,0x00112dca,
    0x0010d0c3,0x0010746d,0x001018c6,0x000fbdce,0x000f6381,0x000f09dd,0x000eb0e0,0x000e5889,
    0x000e00d5,0x000da9c2,0x000d534f,0x000cfd79,0x000ca83f,0x000c539f,0x000bff97,0x000bac25,
    0x000b5948,0x000b06fd,0x000ab544,0x000a641a,0x000a137d,0x0009c36d,0x000973e8,0x000924ec,
    0x0008d677,0x00088889,0x00083b1e,0x0007ee37,0x0007a1d2,0x000755ed,0x00070a87,0x0006bf9e,
    0x00067532,0x00062b40,0x0005e1c7,0x000598c7,0x0005503e,0x0005082a,0x0004c08b,0x0004795f,
    0x000432a5,0x0003ec5c,0x0003a682,0x00036117,0x00031c1a,0x0002d788,0x00029362,0x00024fa6,
    0x00020c52,0x0001c967,0x000186e2,0x000144c4,0x0001030a,0x0000c1b4,0x000080c1,0x00004030,
};
/*
void build_table(void)
{
    unsigned short i;
    float f;
    unsigned int *fi = (unsigned*)&f;  
                                       
    for(i = 0; i <= 0x7f; i++) {

        *fi = 0;

        // first part of table:
        *fi = (i << 16) | (127 << 23);
        f = sqrt(f);
        sqrttab[i] = (*fi & 0x7fffff);

        *fi = (i << 16) | (127 << 23);
        f = 1.0/sqrt(f);
        oosqrttab[i] = (*fi & 0x7fffff);


        // second part of table (odd exponent)
        *fi = 0;
        *fi = (i << 16) | (128 << 23);
        f = sqrt(f);
        sqrttab[i+0x80] = (*fi & 0x7fffff);

        *fi = (i << 16) | (128 << 23);
        f = 1.0/sqrt(f);
        oosqrttab[i+0x80] = (*fi & 0x7fffff);
    }
}
*/

// fast sqrt
float fastsqrt(float n)
{
    unsigned int *num = (unsigned *)&n;
    short e;

    if (n == 0) return (0); 
    e = (*num >> 23) - 127; 
                            
    *num &= 0x7fffff;  
    if (e & 0x01) *num |= 0x800000;

    e >>= 1;
    *num = ((sqrt_tab[*num >> 16])) + ((e + 127) << 23);

    return(n);
}

// fast 1/sqrt
float fastoosqrt(float n)
{
    unsigned int *num = (unsigned *)&n;
    short e;  

    if (n == 0) return (0); 
    e = (*num >> 23) - 127; 
                            
    *num &= 0x7fffff;  
    if (e & 0x01) *num |= 0x800000;

    e >>= 1;
    if(*num)
        e = -(e + 1);
    else
        e = -e;

    *num = ((oo_sqrt_tab[*num >> 16])) + ((e + 127) << 23);

    return(n);
}


#endif
